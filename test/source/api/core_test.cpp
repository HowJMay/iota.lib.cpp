//
// MIT License
//
// Copyright (c) 2017 Thibault Martinez
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
//

#include <gtest/gtest.h>

#include <iota/api/core.hpp>
#include <test/utils/configuration.hpp>

TEST(Core, GetNodeInfo) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getNodeInfo();

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_FALSE(res.getAppName().empty());
  EXPECT_FALSE(res.getAppVersion().empty());
  EXPECT_GE(res.getJreAvailableProcessors(), 0);
  EXPECT_GE(res.getJreFreeMemory(), 0);
  EXPECT_GE(res.getJreMaxMemory(), 0);
  EXPECT_GE(res.getJreTotalMemory(), 0);
  EXPECT_FALSE(res.getLatestMilestone().empty());
  EXPECT_GE(res.getLatestMilestoneIndex(), 0);
  EXPECT_FALSE(res.getLatestSolidSubtangleMilestone().empty());
  EXPECT_GE(res.getLatestSolidSubtangleMilestoneIndex(), 0);
  EXPECT_GE(res.getNeighbors(), 0);
  EXPECT_GE(res.getPacketsQueueSize(), 0);
  EXPECT_GE(res.getTime(), 0);
  EXPECT_GE(res.getTips(), 0);
  EXPECT_GE(res.getTransactionsToRequest(), 0);
}

TEST(Core, GetNeighbors) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getNeighbors();

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_TRUE(res.getNeighbors().size() >= 0);
}

TEST(Core, GetTips) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getTips();

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_TRUE(res.getHashes().size() >= 0);
}

TEST(Core, GetTrytes) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getTrytes(
      { "OAATQS9VQLSXCLDJVJJVYUGONXAXOFMJOZNSYWRZSWECMXAQQURHQBJNLD9IOFEPGZEPEMPXCIVRX9999" });

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_EQ(
      res.getTrytes()[0],
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
      "99999");
}

TEST(Core, GetTrytesInvalidHash) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());

  auto res = api.getTrytes({ "9999" });
  ASSERT_EQ(res.getStatusCode(), 400);
  EXPECT_GE(res.getDuration(), 0);
}

TEST(Core, GetBalances) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getBalances(
      { "HBBYKAKTILIPVUKFOTSLHGENPTXYBNKXZFQFR9VQFWNBMTQNRVOUKPVPRNBSZVVILMAFBKOTBLGLWLOHQ" }, 100);

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_FALSE(res.getBalances().empty());
  EXPECT_TRUE(IOTA::Types::isValidHash(res.getMilestone()));
  EXPECT_GE(res.getMilestoneIndex(), 0);
}

TEST(Core, GetBalancesInvalidAddress) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getBalances({ "9999" }, 100);

  ASSERT_EQ(res.getStatusCode(), 400);
  EXPECT_GE(res.getDuration(), 0);
}

TEST(Core, GetBalancesInvalidThreshold) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getBalances(
      { "HBBYKAKTILIPVUKFOTSLHGENPTXYBNKXZFQFR9VQFWNBMTQNRVOUKPVPRNBSZVVILMAFBKOTBLGLWLOHQ" }, 0);

  ASSERT_EQ(res.getStatusCode(), 400);
  EXPECT_GE(res.getDuration(), 0);
}

TEST(Core, GetTransactionsToApprove) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.getTransactionsToApprove(27);

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_GE(res.getDuration(), 0);
  EXPECT_TRUE(IOTA::Types::isValidHash(res.getTrunkTransaction()));
  EXPECT_TRUE(IOTA::Types::isValidHash(res.getBranchTransaction()));
}

TEST(Core, BroadcastTransactions) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.broadcastTransactions(
      { "ZSHYKDWVIUELK9LJTNTJVFDCPRVLUWNKJEYUSQZJZDQBC9PEHYSFOCGUXXFBVQYMSFXKETPCPGAFESNQPVTYRKTSPO"
        "DG9OSEWCLNYMURXEJIVIDTM9MGXDFQWDPHWBKW9JUTVDGZBGGPEYYNDZXF9NXZUXVZJDOXCQRNXLPUSFYA9QSZSPFA"
        "G9NOCWBA9XXWG9IYSYEDUJ9HEWGUVTQLOKIXHIOJEIDMNJ9SQNMFVREQVXCAEDLODQVILRCDPOPSCBWBUYPNDSLKYH"
        "MSREPGZJCTPNJRCRFVKVDTRZBLZQMKTEOO9RJFGQYBUCOBILLCFSJ9QVGGOQJEKUSTEBVPHZYEDYVPVQTTLWKAYBZC"
        "NIVICILMQOFDBLESJIDFYQRZZFWMAPWTADRPJEXSGNLOYYBMWXDAHHBEAHCOREXHNHQRJSNWQYEXKWVBXJROAYWQPN"
        "YLXCXKTIYUBRGERILDXHKVTKTJMXOCNYGQX9XOWZ9RGXZNCECRYZACBPQVRVUY9HURNAGGDOIJJBLDYOJCEELBGHNY"
        "GYDHJDOUCAMEHNPJZSBGXQHJTSNFEDJKYXPGJYBVOKOSEQGSRAAKYCBNWLFB9HITSLUIMZMULGKOXAFKRIMLDAXRTH"
        "IMZFISESWVPHZEPTWIOAWMCEWHINUKNJVKAJKXMJWUFIOVSUMCHIUUHXCYNIURCHKNLYPVORPQWXA9CEUDRSBEKQDR"
        "HZPQGSMSUYTNR9IJFDZMF9PAKCSFA9CGCWAGCAEACKLRYOSFVYQ9SJEPWQEUAWRLMMWMXVSRRKLDEWYDT9YTWTQGHX"
        "AZFTJVFOPVJMOPOPHAEQNLQKGWLQBHMECKFZTUKAV9OSNOGSCLRKHNR9BOEGZAAHUUUJZRNNPZBIQQANRJZRLMVO9L"
        "GEMJ9YHSPGAQOEJDOWDHQADFQSFCDAIEEUJDYXLUHTGRWSBLHSTAER9NQGMPIPWTMOCJHBSAQMIMCIQLHEQOJWTPGT"
        "LVDDYBORC9JA9DJG9BVBXRLMVVZGUDAZFJVWPUTCY9XBGWBAWIVJQLKUCHT9BALMLAYXGQYDFDNA9UVZWABIDKAY9E"
        "HSGCIKJZLTFRKQABLKUFLM9LLECELPDQEIYEKKZFVHJBYNXJWLUIAPIVYGNTOF9KJWXIEWBRVNQHVCBPMZWQN9TXBR"
        "WPIHESQQQHLCDFUTIDD9UWCDTOXGPMKWWVNNCTYJRKWQYJRRTDAFQAOHDLSIAVEDXOYYQYEZXSTXCIMJQZHYGBXNZH"
        "EA9FBQSDVVCMKROBCISDVCSBGNQOXOGTSWLGNCJ9CYM9QXERUSKVGZPMVZ9JMPLFFIVCRMYBVPSQMDQQ9POBVJFR9Q"
        "ESLNKYPPJWJPKOXJRCYOQZPBBLGANGZ9WZCWPJITMSPHGDDBMAKTBDVZOSSQYINCDOXFFRUMUJFNSDPTHMHW9MGBQH"
        "JIKLSF9JXTFNAWPAWPQZPSLCESHHVIRWCK9PLGMPQCPGSFXRJBC9XFDPWTMCBKJHOIVNSVJATGUHJSDYHZGKLFSLYI"
        "PTQTKYWPKSNP9HZF9SXQH9JBCIYMZGRCNAFZRIHUPAXMCFRDVXYWWVYRLSYQZWRURKESTWNBZLOYMVYMCTGJXWNNZR"
        "TMMYFKSH9IKCDEGNGWSVOC9FSFMJKNKKBMUMIEYWGCXTOBDQNASSQGDGTTKZRWAVEJJPELTTICELPHLWPNROCN9ZPH"
        "EQBVWRVSEIBHSTHYFYZDPPBDRV9EUIRQQJQWVHVAFQNICNTFADDNJHVRPEJJGPCOQRKYVM9TESIKDAZXIUZMDPAHNC"
        "KXLYPJVVU9ZMQWJZPALSSEWUTTGOJRWKZPVVNGOSPLEFKUCKJOCZCYLRVZXU9ACSQXFHATHGBBQELXZGILLBBAMUJA"
        "LWGFQCNENX9IILGCSCRZMOVUSNATSGMXURQHHYYQO9QDHCIWMKGXDQJPWTNTJYNJVBVYZCEKWEXQEFP99RWUOFNXUS"
        "ZAMTFIUP9SXBZOKPRSUMGPHCTZSC9VJQTREJCXLDASMEQBTGN9ORUWKNIYGOENTRLHZMJGOMUMSKKSVIGIDXNPICTT"
        "MW9BBMUJLOBDNOOQMBIIEXFKFBZANGFFUZ9WR9W99YOECZQOSOMIS9YDXQHQILPOYOJZSYLHYTREJNYTIIQILNARWR"
        "RHUMLTSTZKREEH9DMKEQDQOIMBUKPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYC"
        "PVTZQLEEJVYJZV9BWU999999999999999999999999999PR9L99999999999999999999999XRGOCXD99999999999"
        "A99999999VDEJETSNVGNF9GYUKIMLG9IQIMPZGVJWCHLTGKZOUAUVISZFWFK9EEUZQTQTYEUUMBDXO9ZPHUCYDNEQW"
        "KSAUYAAIDYZKO9VOMQLPNAJUZVVYPBNBYHLPJDOVARWOIK9RXZVNUZNBF9QQHRT9K9UE9BGMDFDZZ9999ONCRHVNJU"
        "MGDDJNDZOZT9ZIFSOOIZCJXPUAKPRDQIUWFSUWBHKYELSAPTKYTJSVRYZIB9VPMGJTYA9999999999999999999999"
        "999999999999999999999999999999999999YMPQKKOJOSDDAMHVQJDYWZVDDBR" });

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_GE(res.getDuration(), 0);
}

TEST(Core, BroadcastTransactionsInvalidTrytes) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.broadcastTransactions({ "9999" });

  ASSERT_EQ(res.getStatusCode(), 400);
}

TEST(Core, FindTransactionsWithAddress) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.findTransactions(
      { "KPWCHICGJZXKE9GSUDXZYUAPLHAKAHYHDXNPHENTERYMMBQOPSQIDENXKLKCEYCPVTZQLEEJVYJZV9BWU" }, {},
      {}, {});

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Core, FindTransactionsWithInvalidAddress) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.findTransactions({ "9999" }, {}, {}, {});

  ASSERT_EQ(res.getStatusCode(), 400);
}

TEST(Core, FindTransactionsWithTag) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.findTransactions({}, { "QEXL99999999999999999999999999" }, {}, {});

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Core, FindTransactionsWithApprovee) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.findTransactions(
      {}, {},
      { "GFJUYJQRNSNGLSMAZUYRZEMKQRYZS9WACJQPSVDHLMUSDKDJZQ9TAWQCWJKFJTEQBSAI9ROLVQLH99999" }, {});

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Core, FindTransactionsWithInvalidApprovee) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.findTransactions({}, {}, { "9999" }, {});

  ASSERT_EQ(res.getStatusCode(), 400);
}

TEST(Core, FindTransactionsWithBundle) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.findTransactions(
      {}, {}, {},
      { "XCRFXNBPLVMWLSMCUQVNXAKICTH9AHRIZWUEWKTIQNIZXITSPLIQPEPZEGBYLEWWEXYJMIWAYYAAWFJC9" });

  ASSERT_EQ(res.getStatusCode(), 200);
  EXPECT_FALSE(res.getHashes().empty());
}

TEST(Core, FindTransactionsWithInvalidBundle) {
  IOTA::API::Core api(get_proxy_host(), get_proxy_port());
  auto            res = api.findTransactions({}, {}, {}, { "9999" });

  // TODO Should it be checked before as an exception ?
  ASSERT_EQ(res.getStatusCode(), 400);
}
